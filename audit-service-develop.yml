server:
  port: ${CUSTOM_SERVER_PORT:9004}

### Eureka Client configuration
eureka:
  instance:
    preferIpAddress: true
    lease-expiration-duration-in-seconds: 30
  client:
    serviceUrl:
      defaultZone: ${EUREKA_HOST_SERVER}
    registerWithEureka: true
    fetchRegistry: true
    healthcheck:
      enabled: true
    refresh:
      enable: true

### Actuator info (/actuator/info)
info:
  app:
    name: Audit Service Microservice
    description: Microservicio para registro de auditoria
    version: 1.0

management:
  endpoints:
    web:
      exposure:
        include: '*'
      base-path: /actuator
  info:
    env:
      enabled: true

springdoc:
  packagesToScan: com.mitocode.auditservice.api.controllers
  swagger-ui:
   enabled: true

### MySQL database configuration
spring:
  jpa:
    database: ${SPRING_DATABASE_PROVIDER:MYSQL}
    show-sql: false
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
  sql:
    init:
      mode: ALWAYS
      continue-on-error: true
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driverClassName: ${SPRING_DATASOURCE_DRIVERCLASSNAME}
    
  kafka:
    bootstrap-servers: ${KAFKA_BOOSTRAP_SERVER}
    consumer:
      group-id: default
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: '*'
 
app:
  kafka:
    consumer:
      audit-created-topic: auditCreated
